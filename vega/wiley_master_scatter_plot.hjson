/* -----------------------------------------------------------------------------

Scatter-plot of usage estimate (linear) vs. price (log). 

Not interactive

--------------------------------------------------------------------------------

Notes: 

----------------------------------------------------------------------------- */

{
  $schema: "https://vega.github.io/schema/vega/v3.json"
  description: "An interactive scatter plot for selecting journals to inspect."
  padding: 5

  /* ---------------------------------------------------------------------------
  
  DATA
  
  Create several data sets, because the logarithmic axes cannot show values of
  zero. (Missing values and zero values are treated the same).
  
  - raw_summaries:
    - all of the available summary records
  - price_range:
    - has a non-zero value for price (used to find price extent)
  - usage_range:
    - has a non-zero value for usage (used to find usage extent)
  
  - has_both:
    - contains both price and usage, appears in the body of the chart
  - has_only_price:
    - contains price but no usage, appears along the X-axis of the chart
  - has_only_usage:
    - contains usage but no price, appears along the Y-axis of the chart
  - has_neither:
    - contains neither price nor usage, tallied near the origin of the chart
    
  This section is co-dependent with "signals", since:
  - it uses "index_id" and "details_dashboard_id" (from "signals") in the 
    formula for "details_link".
  - it creates "x_extent" and "y_extent" which initializes "x_domain" and 
    "y_domain" (in "signals").
  
  --------------------------------------------------------------------------- */
  data: [
    {
      name: "raw_summaries"
      url: {
        index: "wiley_first"
        body: {
          size: 10000
          "query": {
            "term" : { "record_type" : "summary" }
          }
          _source: ["price", "total_usage_estimate", "journal", "doi"]
        }
      }
      format: {
        property: "hits.hits"
      }
      transform: [
        { 
          type: "formula"
          expr: "datum._source.doi"
          as: "doi"      
        }
        { 
          type: "formula" 
          expr: '''
            "http://localhost:5601/app/kibana#/dashboard/" + details_dashboard_id + 
            "?_a=(description:'',filters:!((meta:(index:" + index_id + 
            ",key:doi,params:(query:'" + datum.doi + "'),value:'" + datum.doi + "')," + 
            "query:(match:(doi:(query:'" + datum.doi + "'))))))"
            '''
          as: "details_link"      
        }
      ]
    }
    
    {
      "name": "price_range"
      "source": "raw_summaries"
      "transform": [
        {
          type: "filter"
          expr: '''
            datum._source.price != null && 
            datum._source.price > 0
            '''
        }
        {
          type: "extent", field: "_source.price", signal: "x_extent"
        }
      ]
    }

    {
      "name": "usage_range"
      "source": "raw_summaries"
      "transform": [
        {
          type: "filter"
          expr: '''
            datum._source.total_usage_estimate != null && 
            datum._source.total_usage_estimate > 0
            '''
        }
        {
          type: "extent", field: "_source.total_usage_estimate", signal: "y_extent"
        }
      ]
    }
   
    {
      "name": "has_both"
      "source": "raw_summaries"
      "transform": [
        {
          type: "filter"
          expr: '''
            (datum._source.price != null && 
             datum._source.price > 0) &&
            (datum._source.total_usage_estimate != null &&
             datum._source.total_usage_estimate > 0)
            '''
        }
      ]
    }
    
    {
      "name": "has_only_price"
      "source": "raw_summaries"
      "transform": [
        {
          type: "filter"
          expr: '''
            (datum._source.price != null && 
             datum._source.price > 0) &&
            (datum._source.total_usage_estimate == null ||
             datum._source.total_usage_estimate <= 0)
            '''
        }
      ]
    }
    
    {
      "name": "has_only_usage"
      "source": "raw_summaries"
      "transform": [
        {
          type: "filter"
          expr: '''
            (datum._source.price == null || 
             datum._source.price <= 0) &&
            (datum._source.total_usage_estimate != null &&
             datum._source.total_usage_estimate > 0)
            '''
        }
      ]
    }
    
    {
      "name": "has_neither"
      "source": "raw_summaries"
      "transform": [
        {
          type: "filter"
          expr: '''
            (datum._source.price == null || 
             datum._source.price <= 0) &&
            (datum._source.total_usage_estimate == null ||
             datum._source.total_usage_estimate <= 0)
            '''
        }
      ]
    }
  ]
  
  /* ---------------------------------------------------------------------------
  
  SIGNALS
  
  --------------------------------------------------------------------------- */
  signals: [
  
    # 
    # These are hard-coded constants, which might need to change when the system 
    # is rebuilt. 
    #
    # The "href" link on each bubble requires a complicated URL which includes the ID 
    # (not the name) of the Kibana dashboard, and the ID of the Index.
    #
  
    { name: "details_dashboard_id", value: "949b1910-0f7a-11e9-a848-657a517453b9" }
    { name: "index_id", value: "a4b76300-fe2f-11e8-a539-d9dfb80e6e65" }
  
    #
    # These control the pan and zoom of the chart.
    #
    
    # Are we panning? Where did it begin? [x, y]
    {
      name: "down" 
      value: null
      on: [
        {events: "mousedown", update: "xy()"}
      ]
    }
    
    # What was the existing pan when we started the current pan?
    {
      name: "pan_previous"
      value: [0, 0]
      on: [ { events: "mousedown", update: "slice(pan)" } ]
    }
    
    # How far have we panned this time? [delta-x, delta-y]
    {
      name: "delta"
      value: [0, 0]
      on: [
        { events: [
            {
              source: "window", type: "mousemove", consume: true
              between: [{type: "mousedown"}, {source: "window", type: "mouseup"}]
            }
          ]
          update: "down ? [down[0]-x(), y()-down[1]] : [0,0]"
        }
      ]
    }

    # How far have we panned, altogether? (in pixels)
    # Note that this already has the zoom applied to it, since delta is always in pixels.
    {
      name: "pan" 
      value: [0, 0]
      on: [
        {
          events: {signal: "delta"}
          update: "[pan_previous[0] + delta[0], pan_previous[1] + delta[1]]"
        }
        {
          # This transform insures that the data mapped to the anchor point doesn't move when we zoom.
          events: {signal: "zoom"}
          update: "[pan[0] + anchor[0]/zoom_previous - anchor[0]/zoom, pan[1] - anchor[1]/zoom_previous + anchor[1]/zoom]"
        }
      ]
    }

    # Where was the mouse when the zoom began this time?
    {
      name: "anchor"
      value: [0, 0]
      on: [
        { events: "wheel", update: "[x(), y()]" }
      ]
    }
    
    # What was the existing zoom when we started the current zoom?
    {
      name: "zoom_previous"
      value: 1
      on: [
        { events: "wheel", update: "zoom" }
      ]
    }
    
	# How far have we zoomed, altogether?
	{
	  name: "zoom"
      value: 1
      on: [
        { 
          events: "wheel!", force: true
          update: "zoom_previous * pow(1.001, event.deltaY * pow(16, event.deltaMode))" 
        }
      ]
    }

    # How do the pan and zoom affect the visible domain?
    {
      name: "x_domain_current"
      update: "slice(x_extent)"
      on: [
        {
          events: [{signal: "pan"}, {signal: "zoom"}]
          update: "[invert('x_scale_original', scale('x_scale_original', x_extent[0]) / zoom + pan[0]), invert('x_scale_original', (scale('x_scale_original', x_extent[1]) / zoom + pan[0])) ]"
        }
      ] 
    }
    {
      name: "y_domain_current"
      update: "slice(y_extent)"
      on: [
        {
          events: [{signal: "pan"}, {signal: "zoom"}]
          update: "[invert('y_scale_original', scale('y_scale_original', y_extent[0]) / zoom - pan[1]), invert('y_scale_original', (scale('y_scale_original', y_extent[1]) / zoom - pan[1])) ]"
        }
      ] 
    }

    # How large are the circles?
    {
      name: "circle_size"
      value: 30
      on: [
        {
          events: {signal: "zoom"}
          update: "30 * zoom"
        }
      ]
    }
    
    # How much room do we leave for the nulls?
    {
      name: "null_gap"
      value: 40
#      on: [
#        {
#          events: {signal: "circle_size"}
#          update: "10 + circle_size"
#        }
#      ]
    }
    
    # Clip the usage_only marks at the top and bottom of the chart.
    { 
      name: "usage_clip_path"
      update: "'M0,0 h-50 v' + height + ' h50 Z'" 
    }
    
    # Clip the price_only marks at the left and right sides of the chart.
    { 
      name: "price_clip_path"
      update: "'M0,' + height + ' v50 h' + width + ' v-50 Z'" 
    }
  ]
  
  /* ---------------------------------------------------------------------------
  
  SCALES
  
  --------------------------------------------------------------------------- */
  scales: [
    {
      name: "x_scale_original"
      type: "log"
      nice: true
      round: true
      zero: false
      domain: {signal: "x_extent"}
      range: "width"
    }
    {
      name: "y_scale_original"
      type: "log"
      nice: true
      round: true
      zero: false
      domain: {signal: "y_extent"}
      range: "height"
    }
    {
      name: "x_scale"
      type: "log"
      zero: false
      domain: {signal: "x_domain_current"}
      range: "width"
    }
    {
      name: "y_scale"
      type: "log"
      zero: false
      domain: {signal: "y_domain_current"}
      range: "height"
    }
  ]

  /* ---------------------------------------------------------------------------
  
  AXES
  
  --------------------------------------------------------------------------- */
  axes: [
    {
      scale: "x_scale"
      grid: true
      domain: false
      orient: "bottom"
      offset: 20
      title: "Price"
    }
    {
      scale: "y_scale"
      grid: true
      domain: false
      orient: "left"
      offset: 20
      titlePadding: 5
      title: "Estimated Usage"
    }
  ]

  /* ---------------------------------------------------------------------------
  
  MARKS
  
  --------------------------------------------------------------------------- */
  marks: [

    # Circles in the main area of the graph for journals with both price and usage.
    {
      name: "both_marks"
      type: "symbol"
      from: {data: "has_both"}
      clip: true
      encode: {
        enter: {
          shape: {value: "circle"}
          strokeWidth: {value: 2}
          stroke: {value: "black"}
          fill: {value: "green"}
          opacity: {value: 0.4}
          tooltip: {field: "_source.journal"}
          href: {field: "details_link"}
        }
        update: {
          x: {scale: "x_scale", field: "_source.price"}
          y: {scale: "y_scale", field: "_source.total_usage_estimate"}
          size: {signal: "circle_size"}
        }
      }
    }
    
    # Circles on the Y-axis for journals with usage but no price.
    {
      name: "usage_marks"
      type: "symbol"
      from: {data: "has_only_usage"}
      clip: {path: {signal: "usage_clip_path"}}
      encode: {
        enter: {
          shape: {value: "circle"}
          strokeWidth: {value: 2}
          stroke: {value: "black"}
          fill: {value: "blue"}
          opacity: {value: 0.4}
          tooltip: {field: "_source.journal"}
          href: {field: "details_link"}
        }
        update: {
          x: {value: -10}
          y: {scale: "y_scale", field: "_source.total_usage_estimate"}
          size: {signal: "circle_size"}
        }
      }
    }
    
    # Circles on the X-axis for journals with price but no usage.
    {
      name: "price_marks"
      type: "symbol"
      from: {data: "has_only_price"}
    #  clip: {path: {signal: "price_clip_path"}}
      encode: {
        enter: {
          shape: {value: "circle"}
          strokeWidth: {value: 2}
          stroke: {value: "black"}
          fill: {value: "blue"}
          opacity: {value: 0.4}
          tooltip: {field: "_source.journal"}
          href: {field: "details_link"}
        }
        update: {
          x: {scale: "x_scale", field: "_source.price"}
          x: {scale: "x_scale", field: "_source.price"}
          # Why do these y-expressions cause the re-drawing to freeze (killing zoom, pan)
          #  y: {signal: "price_y", offset: 15}
          #  y: {signal: "height + 15"}
          # But this one works fine?
          y: {scale: "y_scale", signal: "y_domain_current[0]", offset: 10}
          size: {signal: "circle_size"}
        }
      }
    }
  ]
}
